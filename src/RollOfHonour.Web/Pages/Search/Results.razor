@page "/Results"

@inject RollOfHonour.Core.Search.ISuperSearchService _searchService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager navManager;
@using Ardalis.Result;
@using RollOfHonour.Core.Enums;
@using RollOfHonour.Core.Models;
@using RollOfHonour.Core.Models.Search;
@using RollOfHonour.Web.Pages.Shared.Components;

<section class="panel with-background bg-app">
    <div class="container is-fluid">
        <div class="breadcrumb-block with-margin-bottom">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li>
                        <a asp-page="/index" class="parent">
                            Home
                            <span class="spacer" aria-hidden="true">
                                <i class="fa-light fa-chevron-right"></i>
                            </span>
                        </a>
                    </li>
                    <li>
                        <a href="/search" class="parent">
                            Search
                            <span class="spacer" aria-hidden="true">
                                <i class="fa-light fa-chevron-right"></i>
                            </span>
                        </a>
                    </li>
                    <li>
                        <a href="/results" aria-current="location" class="current">
                            Search Results for "@SearchString"
                        </a>
                    </li>
                </ol>
            </nav>
        </div>

        @if (HasResults || _isLoading)
        {
            <div class="columns is-multiline">

                <div id="results-jump-to" class="column is-full-tablet is-8-desktop is-8-widescreen is-8-fullhd">

                    <div class="text-block">
                        <h1>Search results for <span class="highlight">"@SearchString"</span> (Count @ResultsCount)</h1>
                        <p>
                            The results for your search are listed below. You can make further adjustments to your search if
                            you need
                            to and the results will update for you.
                        </p>
                    </div>
                    <ResultsListComponent
                        @bind-PersonSearchResults="PersonSearchResults"
                        @bind-MemorialSearchResults="MemorialSearchResults"
                        @bind-PageIndex="PageIndex"
                        @bind-IsLoading="_isLoading"
                        ChangePage="@ChangePage"/>
                </div>
                @if (_selectedQueryType == QueryType.Person || _selectedQueryType == QueryType.Regiment)
                {
                    <div class="column is-full-tablet is-4-desktop is-4-widescreen is-4-fullhd">
                        <aside class="sidebar" id="jumpto-filters">
                            <div class="search-filter-block">
                                <div class="form-toggle-block">
                                    <span class="toggle-label">
                                        Specific War?
                                    </span>
                                    <ul>
                                        <InputRadioGroup @bind-Value=@_selectedWar>
                                            @foreach (var war in (War[])Enum.GetValues(typeof(War)))
                                            {
                                                <li>
                                                    <InputRadio class="input-hidden" id=@war Value=@war/>
                                                    @switch (war)
                                                    {
                                                        case War.WW1:
                                                            <label class="radio-label" for=@war>
                                                                <img src="/images/insignia-ww1-search.png" alt="World War 1" class="radio-image"/>
                                                                <span class="radio-text">World War 1</span>
                                                            </label>
                                                            break;
                                                        case War.WW2:
                                                            <label class="radio-label" for=@war>
                                                                <img src="/images/insignia-ww2-search.png" alt="World War 2" class="radio-image"/>
                                                                <span class="radio-text">World War 2</span>
                                                            </label>
                                                            break;
                                                        default:
                                                            <label class="radio-label" for=@war></label>
                                                            break;
                                                    }
                                                </li>
                                            }
                                        </InputRadioGroup>
                                    </ul>
                                </div>
                            </div>
                            @if (_regimentFilters.Any())
                            {
                                <RegimentFilters ToggleRegiment="ToggleRegiment" Regiments="_regimentFilters"/>
                            }
                            <div class="search-filter-block">
                                <div class="date-range-block">
                                    <span class="filter-label">
                                        Filter between a specific period
                                    </span>

                                    <ul>
                                        <li>
                                            <div class="range-slider">
                                                <input class="range-slider__range" type="range" @bind=@_dateOfBirthFilter
                                                       min="1850" max="2000" name="birth_date">
                                                <span class="range-slider__value">@_dateOfBirthFilter</span>
                                                <label for="birth_date">Date of Birth</label>
                                            </div>
                                        </li>

                                        <li>
                                            <div class="range-slider">
                                                <input class="range-slider__range" type="range" @bind=@_dateOfDeathFilter
                                                       min="1850" max="2000" name="death_date">
                                                <span class="range-slider__value">@_dateOfDeathFilter</span>
                                                <label for="death_date">Date of Death</label>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            <div class="search-filter-block">
                                <div class="form-toggle-block">
                                    <span class="toggle-label">
                                        Is this person Military or Civilian?
                                    </span>
                                    <ul>
                                        <InputRadioGroup @bind-Value=@_selectedPersonType>
                                            @foreach (var personType in (PersonType[])Enum.GetValues(typeof(PersonType)))
                                            {
                                                <li>
                                                    <InputRadio class="input-hidden" id=@personType Value=@personType/>
                                                    @switch (personType)
                                                    {
                                                        case PersonType.Military:
                                                            <label class="radio-label" for=@personType>
                                                                <img src="/images/insignia-military-search.png" alt="Military Records" class="radio-image"/>
                                                                <span class="radio-text">@personType</span>
                                                            </label>
                                                            break;
                                                        case PersonType.Civilian:
                                                            <label class="radio-label" for=@personType>
                                                                <img src="/images/insignia-civilian-search.png" alt="Civilian Records" class="radio-image"/>
                                                                <span class="radio-text">@personType</span>
                                                            </label>
                                                            break;
                                                        default:
                                                            <label class="radio-label" for=@personType></label>
                                                            break;
                                                    }
                                                </li>
                                            }
                                        </InputRadioGroup>
                                    </ul>

                                </div>
                            </div>

                            <button title="Look at this record" type="button" disabled="@_isLoading" @onclick="FilterSearch" class="button primary">
                                <i
                                    class="fal fa-glasses" aria-hidden="true">
                                </i> Filter Search
                            </button>

                            <a href="#jumpto-results" class="button primary mobile-results-button"
                               title="Go back to search results">
                                See your search results
                            </a>
                        </aside>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="form-block with-margin-bottom with-margin-top" data-aos="fade-up">
                <div class="form-row">
                    <h1>Your query returned no results.</h1>
                    <button type="button" @onclick="ReturnToSearch" class="submit-button centered" form="search-all">
                        <i
                            class="fal fa-file-search">
                        </i> Search our
                        records
                    </button>
                </div>
            </div>
        }
    </div>
</section>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "s")]
    public string SearchString { get; set; } = String.Empty;

    public int PageIndex { get; set; } = 1;

    [Parameter]
    [SupplyParameterFromQuery(Name = "qt")]
    public int SelectedQueryType { get; set; }

    private QueryType _selectedQueryType { get; set; } = QueryType.Person;
    private War? _selectedWar { get; set; }
    private PersonType? _selectedPersonType { get; set; }
    private HashSet<int> _regimentIds { get; set; } = new();
    private int _dateOfDeathFilter { get; set; } = 1900;
    private int _dateOfBirthFilter { get; set; } = 1900;
    private List<RegimentFilter> _regimentFilters { get; set; } = new();
    private bool _isLoading = true;
        private const int _pageSize = 10;
    public PaginatedList<Memorial> MemorialSearchResults = new();
    public PaginatedList<Person> PersonSearchResults = new();
    public bool HasResults => MemorialSearchResults.Any() || PersonSearchResults.Any();
    public int ResultsCount => PersonSearchResults.ResultsCount + MemorialSearchResults.ResultsCount;

    protected override async Task OnInitializedAsync()
    {
        SetSearchParamsFromQuery();
        PersonSearchResults = new();
        MemorialSearchResults = new();

        switch (_selectedQueryType)
        {
            case QueryType.Person:
                await QueryPeople(false, PageIndex);
                _regimentFilters = await _searchService.GetRegimentFiltersForSearch(BuildPersonQuery());
                break;

            case QueryType.Memorial:
            {
                var searchQuery = BuildMemorialQuery();

                Result<PaginatedList<Memorial>> results = await _searchService.MemorialSearch(searchQuery, PageIndex, _pageSize);

                if (results.IsSuccess is not true)
                {
                    return;
                }

                if (!results.Value.Any())
                {
                    return;
                }

                MemorialSearchResults = results.Value;
                break;
            }

            case QueryType.Regiment:
                await QueryPeopleByRegiment(false, PageIndex);
                _regimentFilters = await _searchService.GetRegimentFiltersForSearchByRegimentName(BuildRegimentPersonQuery());
                break;

            default:
                throw new ArgumentOutOfRangeException();
        }
        _isLoading = false;
    }

    protected override void OnParametersSet()
    {
        SetSearchParamsFromQuery();
    }

    private async Task QueryPeople(bool stateChangeNeeded, int pageIndex)
    {
        PersonSearchResults = new();
        if (_selectedQueryType == QueryType.Person)
        {
            var query = BuildPersonQuery();
            var filters = new Filters(_selectedWar, _dateOfDeathFilter, _dateOfBirthFilter, _selectedPersonType, _regimentIds);
            Result<PaginatedList<Person>> results = await _searchService.PersonSearch(query, filters, pageIndex, _pageSize);

            if (results.IsSuccess is not true)
            {
                return;
            }

            if (!results.Value.Any())
            {
                return;
            }


            PersonSearchResults = results.Value;
            if (stateChangeNeeded)
            {
                StateHasChanged();
            }
        }
    }

    private async Task QueryPeopleByRegiment(bool stateChangeNeeded, int pageIndex)
    {
        PersonSearchResults = new();
        if (_selectedQueryType == QueryType.Regiment)
        {
            var query = BuildRegimentPersonQuery();
            var filters = new Filters(_selectedWar, _dateOfDeathFilter, _dateOfBirthFilter, _selectedPersonType, _regimentIds);
            Result<PaginatedList<Person>> results = await _searchService.PersonSearchByRegimentName(query, filters, pageIndex, _pageSize);

            if (results.IsSuccess is not true)
            {
                return;
            }

            if (!results.Value.Any())
            {
                return;
            }


            PersonSearchResults = results.Value;
            if (stateChangeNeeded)
            {
                StateHasChanged();
            }
        }
    }

    private async Task FilterSearch()
    {
        _isLoading = true;
        PageIndex = 1;
        _ = await JSRuntime.InvokeAsync<bool>("scrollToElementId", "results-jump-to");
        switch (_selectedQueryType)
        {
            case QueryType.Regiment:
                await QueryPeopleByRegiment(true, PageIndex);
                break;
            case QueryType.Person:
                await QueryPeople(true, PageIndex);
                break;
            case QueryType.Memorial:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        _isLoading = false;
    }

    private void ToggleRegiment(int regimentId)
    {
        if (_regimentIds.Contains(regimentId))
        {
            _regimentIds.Remove(regimentId);
        }
        else
        {
            _regimentIds.Add(regimentId);
        }
    }

    private async Task ChangePage(int page)
    {
        _isLoading = true;
        PageIndex = page;
        _ = await JSRuntime.InvokeAsync<bool>("scrollToElementId", "results-jump-to");
        switch (_selectedQueryType)
        {
            case QueryType.Regiment:
                await QueryPeopleByRegiment(true, PageIndex);
                break;
            case QueryType.Person:
                await QueryPeople(true, PageIndex);
                break;
            case QueryType.Memorial:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        _isLoading = false;
    }

    private PersonQuery BuildPersonQuery()
    {
        var searchQuery = new PersonQuery
        {
            SearchTerm = SearchString,
            SelectedWar = _selectedWar,
            PersonType = _selectedPersonType,
        };

        return searchQuery;
    }

    private RegimentPersonQuery BuildRegimentPersonQuery()
    {
        var searchQuery = new RegimentPersonQuery
        {
            SearchTerm = SearchString,
            SelectedWar = _selectedWar,
            PersonType = _selectedPersonType,
        };

        return searchQuery;
    }

    private MemorialQuery BuildMemorialQuery()
    {
        var searchQuery = new MemorialQuery
        {
            SearchTerm = SearchString
        };

        return searchQuery;
    }

    private void SetSearchParamsFromQuery()
    {
        _selectedQueryType = (QueryType)SelectedQueryType;
    }

    private void ReturnToSearch()
    {
        navManager.NavigateTo($"/Search", false);
    }

}