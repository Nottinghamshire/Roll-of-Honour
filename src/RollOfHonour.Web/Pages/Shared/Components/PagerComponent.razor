<div class="pagination-block">
    <ul>
        @if (HasPreviousPage)
        {
            <li>
                <a role="button" @onclick="@(e => UpdatePage(CurrentPage - 1))">
                    <i class="fa-light fa-chevron-left"></i>
                </a>
            </li>
        }
        @foreach (var pageNum in PageRange)
        {
            var active = pageNum == CurrentPage ? "active" : "inactive";
            <li class="@active">
                <a role="button" @onclick="@(e => UpdatePage(pageNum))">@pageNum</a>
            </li>
        }
        @if (HasNextPage)
        {
            <li>
                <a @onclick="@(e => UpdatePage(CurrentPage + 1))">
                    <i class="fa-light fa-chevron-right"></i>
                </a>
            </li>
        }
    </ul>
</div>

@code {
    public int[] PageRange { get; private set; } = new int[] { 0 };
    public bool HasPreviousPage => CurrentPage > 1;
    public bool HasNextPage => CurrentPage < PageCount;

    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public int PageCount { get; set; }
    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }
    [Parameter]
    public EventCallback<int> ChangePage { get; set; }

    protected override void OnInitialized()
    {
        SetPageRange();
    }

    protected override void OnParametersSet()
    {
        SetPageRange();
    }

    private async Task UpdatePage(int page)
    {
        if (ChangePage.HasDelegate)
        {
            await ChangePage.InvokeAsync(page);
        }

        CurrentPage = page;
    }

    private void SetPageRange()
    {
        if (PageCount == 1)
        {
            this.PageRange = new int[] { 1 };
            return;
        }

        if (PageCount < 9)
        {
            this.PageRange = Enumerable.Range(1, PageCount).ToArray();
            return;
        }

        if (CurrentPage == 1)
        {
            this.PageRange = Enumerable.Range(1, 9).Append(PageCount).ToArray();
            return;
        }

        int minRange = Math.Max(1, CurrentPage - 4);
        int maxRange = Math.Min(PageCount, CurrentPage + 5);
        if (minRange <= 1)
        {
            this.PageRange = Enumerable.Range(1, 9).Append(PageCount).ToArray();
            return;
        }

        var count = (maxRange - minRange) + 1;
        if (maxRange == PageCount)
        {
            this.PageRange = Enumerable.Range(minRange, count).Prepend(1).ToArray();
            return;
        }

        this.PageRange = Enumerable.Range(minRange, count).Prepend(1).Append(PageCount).ToArray();
    }
}